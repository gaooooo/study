{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;AAKA,IAAI,SAAS,QAAQ,YAAR,CAAT;AACJ,IAAI,QAAQ,QAAQ,YAAR,CAAR;AACJ,IAAI,QAAQ,QAAQ,WAAR,CAAR;AACJ,IAAI,MAAM,QAAQ,KAAR,CAAN;AACJ,IAAI,KAAK,QAAQ,IAAR,CAAL;AACJ,IAAI,MAAM,KAAN;AACJ,IAAI,KAAK,QAAQ,IAAR,CAAL;AACJ,IAAI,OAAO,QAAQ,MAAR,CAAP;AACJ,IAAI,OAAO,QAAQ,iBAAR,CAAP;;;AAGJ,IAAI,GAAJ,CAAQ,QAAR;AACA,IAAI,GAAJ,CAAQ,MAAR;;;;AAIA,IAAI,GAAJ,CAAQ,WAAW,IAAX,EAAgB;AACtB,QAAM,IAAN,CADsB;AAEtB,MAAI,KAAK,IAAL,IAAa,CAAC,KAAK,UAAL,EAAiB,OAAnC;AACA,OAAK,QAAL,CAAc,WAAd,EAHsB;CAAhB,CAAR;;;AAOA,QAAQ,GAAR,CAAY,SAAZ;;;;AAIA,IAAI,GAAJ,CAAQ,WAAW,IAAX,EAAgB;;AAEpB;;AAFoB,MAIlB,UAAU,KAAK,MAAL,EAAa,OAAO,MAAM,IAAN,CAAlC;;AAEC,MAAI,QAAM,KAAK,IAAL,CAAU,KAAV,CAAgB,IAAhB,CANW;AAOhB,MAAG,MAAM,MAAN,GAAa,CAAb,EAAe;AACd,SAAI,IAAI,IAAJ,IAAY,KAAhB,EAAsB;AAClB,UAAI,SAAQ,MAAM,IAAN,EAAY,MAAZ,CAAR,CADc;AAElB,UAAI,SAAQ,MAAM,IAAN,EAAY,MAAZ,EAAoB,KAApB,CAA0B,GAA1B,CAAR,CAFc;AAGlB,UAAI,MAAK,MAAI,OAAO,OAAO,MAAP,GAAc,CAAd,CAAX,CAHS;AAIlB,UAAI,UAAS,KAAK,IAAL,CAAU,QAAV,EAAoB,SAAS,KAAK,MAAL,KAAc,GAAd,CAAT,GAA8B,KAAK,KAAL,CAAW,IAAI,IAAJ,EAAX,EAAuB,QAAvB,EAA9B,GAAkE,GAAlE,CAA7B,CAJc;AAKlB,cAAQ,GAAR,CAAY,MAAZ,EALkB;AAMlB,cAAQ,GAAR,CAAY,OAAZ,EANkB;AAOlB,UAAI,SAAS,GAAG,iBAAH,CAAqB,KAAK,IAAL,CAAU,SAAV,EAAoB,OAApB,CAArB,CAAT;AAPc,QAQlB,CAAG,gBAAH,CAAoB,MAApB,EAA4B,IAA5B,CAAiC,MAAjC;AARkB,KAAtB;GADJ;;;;;;;;;;;;AAPgB,MA+BtB,CAAK,QAAL,CAAc,GAAd,EA/BsB;CAAhB,CAAR;;;;AAoCA,IAAI,MAAJ,CAAW,IAAX;AACA,QAAQ,GAAR,CAAY,wBAAZ","file":"index-compiled.js","sourcesContent":["\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar logger = require('koa-logger');\r\nvar serve = require('koa-static');\r\nvar parse = require('co-busboy');\r\nvar koa = require('koa');\r\nvar fs = require('fs');\r\nvar app = koa();\r\nvar os = require('os');\r\nvar path = require('path');\r\nvar body = require('koa-better-body')\r\n// log requests\r\n\r\napp.use(logger());\r\napp.use(body());\r\n\r\n// custom 404\r\n\r\napp.use(function *(next){\r\n  yield next;\r\n  if (this.body || !this.idempotent) return;\r\n  this.redirect('/404.html');\r\n});\r\n\r\n// serve files from ./public\r\nconsole.log(__dirname);\r\n\r\n// handle uploads\r\n\r\napp.use(function *(next){\r\n\r\n    debugger\r\n  // ignore non-POSTs\r\n  if ('POST' != this.method) return yield next;\r\n  \r\n   var files=this.body.files.file;  \r\n        if(files.length>0){  \r\n            for(var item in files){  \r\n                var tmpath= files[item]['path'];  \r\n                var tmparr =files[item]['name'].split('.');  \r\n                var ext ='.'+tmparr[tmparr.length-1];  \r\n                var newpath =path.join('public', parseInt(Math.random()*100) + Date.parse(new Date()).toString() + ext);  \r\n                console.log(tmpath);  \r\n                console.log(newpath);  \r\n                var stream = fs.createWriteStream(path.join(__dirname,newpath));//创建一个可写流  \r\n                fs.createReadStream(tmpath).pipe(stream);//可读流通过管道写入可写流  \r\n            }  \r\n        }  \r\n  \r\n\r\n//   // multipart upload\r\n//   var parts = parse(this);\r\n//   var part;\r\n\r\n//   while (part = yield parts) {\r\n//     var stream = fs.createWriteStream(path.join(os.tmpdir(), Math.random().toString()));\r\n//     part.pipe(stream);\r\n//     console.log('uploading %s -> %s', part.filename, stream.path);\r\n//   }\r\n\r\n  this.redirect('/');\r\n});\r\n\r\n// listen\r\n\r\napp.listen(3000);\r\nconsole.log('listening on port 3000');\r\n"]}